package com.test;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect// aop 에서 사용하는 빈임 
public class MethodAspect {

	@Before(value = "execution(public * say*(..))")
	public void beforeLoggin(JoinPoint jp)
	{
		System.out.println(jp.getSignature().getName()+ " 메소드 이름!!");
		System.out.println("beforeLoggin");
	}
	@After(value = "execution(public * say*(..))")
	public void afterLoggin()
	{
		
	}
	
	/*@AfterReturning(pointcut = "execution(public * say*(..))",returning="xx")
	// return 값을 xx 라는 변수에 넣어서 
	public void aaa(JoinPoint jp,Object xx)
	{
		
		System.out.println(xx + " 리턴 값 ");
		System.out.println(jp.getSignature().getName()+ " 메소드 이름!!");
		System.out.println("@AfterReturning ");
	}
	*/
	
}
